#include "自由相机.h"

void C自由相机::相机(mat4* 观察矩阵, vec3 初始上方向, vec3 初始前方向, vec3 初始坐标, float 转向灵敏度, float 移动速度)
{
    if (初始化)
    {
        前方向 = normalize(初始前方向);
        右方向 = cross(初始上方向, 前方向);
        右方向 = normalize(右方向);
        上方向 = cross(前方向, 右方向);
        上方向 = normalize(上方向);
        相机坐标 = 初始坐标;
        初始化 = 0;
    }

    if (转向灵敏度储存 != 转向灵敏度) 转向灵敏度 = sinf(转向灵敏度), 转向灵敏度储存 = 转向灵敏度;

    if (按键->键W状态)
        相机坐标 = 相机坐标 + 移动速度 * 前方向;

    if (按键->键S状态)
        相机坐标 = 相机坐标 - 移动速度 * 前方向;

    if (按键->键D状态)
        相机坐标 = 相机坐标 - 移动速度 * 右方向;

    if (按键->键A状态)
        相机坐标 = 相机坐标 + 移动速度 * 右方向;

    if (按键->键space状态)
        相机坐标 = 相机坐标 + 移动速度 * 上方向;

    if (按键->键左shift状态)
        相机坐标 = 相机坐标 - 移动速度 * 上方向;

    if (按键->鼠标位移.x != 0 || 按键->鼠标位移.y != 0)
    {
        前方向 = 前方向 + 右方向 * (转向灵敏度 * 按键->鼠标位移.x / 10);
        前方向 = 前方向 + 上方向 * (转向灵敏度 * 按键->鼠标位移.y / 10);
    }
    if (!按键->鼠标边界状态) 按键->鼠标位移 = { 0, 0 };

    if (按键->键X状态)
        上方向 = 上方向 - 右方向 * 转向灵敏度;

    if (按键->键Z状态)
        上方向 = 上方向 + 右方向 * 转向灵敏度;

    前方向 = normalize(前方向);
    右方向 = cross(上方向, 前方向);
    右方向 = normalize(右方向);
    上方向 = cross(前方向, 右方向);
    上方向 = normalize(上方向);

    看坐标 = 相机坐标 + 前方向;

    *观察矩阵 = lookAtRH(相机坐标, 看坐标, 上方向);
}

//重力相机
void C重力相机::相机(mat4* 观察矩阵, vec3 重力轴, vec3 开局前方向, vec3 初始坐标, float 转向灵敏度, float 移动速度)
{
    if (转向灵敏度储存 != 转向灵敏度) 转向灵敏度, 转向灵敏度储存 = 转向灵敏度;

    if (初始化)
    {
        单位重力轴储存 = normalize(-重力轴);
        前方向 = normalize(开局前方向);
        右方向 = cross(单位重力轴储存, 前方向);
        右方向 = normalize(右方向);
        上方向 = cross(前方向, 右方向);
        上方向 = normalize(上方向);
        重力轴储存 = normalize(重力轴);
        相机坐标 = 初始坐标;
        初始化 = 0;
    }

    if (dot(重力轴储存, normalize(重力轴)) < 0.95)
    {
        单位重力轴储存 = normalize(-重力轴);
        前方向 = normalize(前方向);
        右方向 = cross(单位重力轴储存, 前方向);
        右方向 = normalize(右方向);
        上方向 = cross(前方向, 右方向);
        上方向 = normalize(上方向);
        重力轴储存 = normalize(重力轴);
    }

    if (按键->键W状态)
    {
        重力轴前方向 = cross(右方向, 单位重力轴储存);
        相机坐标 = 相机坐标 + 移动速度 * 重力轴前方向;
    }

    if (按键->键S状态)
    {
        重力轴前方向 = cross(右方向, 单位重力轴储存);
        相机坐标 = 相机坐标 - 移动速度 * 重力轴前方向;
    }

    if (按键->键D状态)
        相机坐标 = 相机坐标 - 移动速度 * 右方向;

    if (按键->键A状态)
        相机坐标 = 相机坐标 + 移动速度 * 右方向;

    if (按键->键space状态)
        相机坐标 = 相机坐标 + 移动速度 * 单位重力轴储存;

    if (按键->键左shift状态)
        相机坐标 = 相机坐标 - 移动速度 * 单位重力轴储存;


    if (按键->鼠标位移.x != 0 || 按键->鼠标位移.y != 0)
    {
        前重角度cos = dot(单位重力轴储存, 前方向);
        旋转向量 = 前方向 - 单位重力轴储存 * 前重角度cos;
        旋转向量长度 = length(旋转向量);
        旋转向量 = 旋转向量 + 右方向 * (转向灵敏度 * 按键->鼠标位移.x / 10);
        旋转向量 = 旋转向量 * 旋转向量长度 / length(旋转向量);
        前方向 = 旋转向量 + 单位重力轴储存 * 前重角度cos;

        保存前方向 = 前方向;
        前方向 = 前方向 + 上方向 * (转向灵敏度 * 按键->鼠标位移.y / 10);
        前方向 = normalize(前方向);
        if (fabs(dot(单位重力轴储存, 前方向)) > 0.95)
            前方向 = 保存前方向;
    }

    前方向 = normalize(前方向);
    右方向 = cross(单位重力轴储存, 前方向);
    右方向 = normalize(右方向);
    上方向 = cross(前方向, 右方向);
    上方向 = normalize(上方向);

    看坐标 = 相机坐标 + 前方向;

    *观察矩阵 = lookAtRH(相机坐标, 看坐标, 上方向);
}

void C第三人称相机::相机(mat4* 观察矩阵)
{
    if (按键->鼠标右键状态 && !按键->鼠标边界状态)
    {
        if (按键->鼠标位移.x != 0 || 按键->鼠标位移.y != 0)
        {
            float dx = radians((float)(按键->鼠标位移.x) * 转向灵敏度);
            float dy = radians((float)(按键->鼠标位移.y) * 转向灵敏度);

            Theta += dx;
            Phi -= dy;

            if (Phi >= pi<float>()) Phi = pi<float>() - 0.01;
            if (Phi <= 0)  Phi = 0.01;
        }
    }

    if (按键->鼠标滑轮状态 != 0)
    {
        半径 -= 按键->鼠标滑轮状态 * 滑轮灵敏度;
        if (半径 < 1.0f) 半径 = 1.0f;
        if (半径 > 400.0f) 半径 = 400.0f;
        按键->鼠标滑轮状态 = 0;
    }

    float x = 半径 * sinf(Phi) * cosf(Theta);
    float z = 半径 * sinf(Phi) * sinf(Theta);
    float y = 半径 * cosf(Phi);

    上方向 = vec3(0.0f, 1.0f, 0.0f);

    if (按键->鼠标边界状态)
    {
        右方向 = normalize(cross(上方向, normalize(看坐标 - 相机坐标)));
        前方向 = normalize(cross(右方向, 上方向));
        旋转角 = acosf(dot(前方向, vec3(1.0f, 0.0f, 0.0f)));
        方向角 = dot(前方向, vec3{ 0.0f, 0.0f, 1.0f });
        if (方向角 > 0) 旋转角 = -旋转角;
        变换 = rotate(mat4(1.0f), 旋转角, vec3(0.0f, 1.0f, 0.0f));
        移动距离 = vec3{ -按键->鼠标位移.y * 移动速度, 0.0f, 按键->鼠标位移.x * 移动速度 };
        移动距离 = 变换 * vec4(移动距离, 1.0f);
        看坐标 += 移动距离;
    }

    相机坐标 = 看坐标 + vec3(x, y, z);

    *观察矩阵 = lookAtRH(相机坐标, 看坐标, 上方向);
}